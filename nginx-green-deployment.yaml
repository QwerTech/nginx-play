apiVersion: v1
kind: Template
metadata:
  name: "nginx-green"
  annotations:
    iconClass: "server"
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: "nginx-green"
    labels:
      app: "nginx-green"
  spec:
    ports:
    - name: "nginx-green"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "nginx-green"
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: "nginx-green"
  spec:
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: "Service"
      name: "nginx-green"
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "nginx-green"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "nginx-green"
    labels:
      app: "nginx-green"
  spec:
    replicas: 1
    selector:
      app: "nginx-green"
    strategy:
      activeDeadlineSeconds: 21600
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: "nginx-green"
      spec:
        serviceAccountName: "nginx-green"
        containers:
        - name: "nginx-green"
          image: "nginx"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 3
            periodSeconds: 3
            successThreshold: 1
            httpGet:
              path: /
              port: 8080
            timeoutSeconds: 2
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/cache/nginx
              name: nginx-cache
            - mountPath: /var/run
              name: nginx-run
            - name: nginx-green-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
        volumes:
          - name: nginx-green-config-volume
            configMap:
              name: nginx-green
          - emptyDir:
              medium: Memory
            name: nginx-cache
          - emptyDir:
              medium: Memory
            name: nginx-run
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: "nginx-green"
  data:
    # конфигурация nginx
    nginx.conf: |-
      worker_processes auto;
      events {
        worker_connections 1024;
      }
      error_log /dev/stdout info;

      http {
          include       /etc/nginx/mime.types;
          server {
              listen 8080;
              root    /usr/share/nginx/html;
              location / {
                  return 200 'Hello green world!';
              }
          }
      }
